// <auto-generated />
using System;
using Matches.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Matches.Infrastructure.Migrations
{
    [DbContext(typeof(MatchesDbContext))]
    partial class MatchesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MatchPlayer", b =>
                {
                    b.Property<Guid>("HomeMatchesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HomePlayersId")
                        .HasColumnType("uuid");

                    b.HasKey("HomeMatchesId", "HomePlayersId");

                    b.HasIndex("HomePlayersId");

                    b.ToTable("HomePlayersMatches", (string)null);
                });

            modelBuilder.Entity("MatchPlayer1", b =>
                {
                    b.Property<Guid>("AwayMatchesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AwayPlayersId")
                        .HasColumnType("uuid");

                    b.HasKey("AwayMatchesId", "AwayPlayersId");

                    b.HasIndex("AwayPlayersId");

                    b.ToTable("AwayPlayersMatches", (string)null);
                });

            modelBuilder.Entity("Matches.Domain.Entities.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AwayGoals")
                        .HasColumnType("integer");

                    b.Property<Guid>("AwayTeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Group")
                        .HasColumnType("text");

                    b.Property<int?>("HomeGoals")
                        .HasColumnType("integer");

                    b.Property<Guid>("HomeTeamId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("MatchDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Matchday")
                        .HasColumnType("integer");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Matches.Domain.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ShirtNumber")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TeamId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Matches.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("MatchPlayer", b =>
                {
                    b.HasOne("Matches.Domain.Entities.Match", null)
                        .WithMany()
                        .HasForeignKey("HomeMatchesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Matches.Domain.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("HomePlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatchPlayer1", b =>
                {
                    b.HasOne("Matches.Domain.Entities.Match", null)
                        .WithMany()
                        .HasForeignKey("AwayMatchesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Matches.Domain.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("AwayPlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Matches.Domain.Entities.Match", b =>
                {
                    b.HasOne("Matches.Domain.Entities.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Matches.Domain.Entities.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("Matches.Domain.Entities.Player", b =>
                {
                    b.HasOne("Matches.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });
#pragma warning restore 612, 618
        }
    }
}
